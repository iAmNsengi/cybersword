# This file represents the base specification of your challenge. It is used by
# other tools to install and deploy your challenge.

name: "Hidden IDOR"
author: "Zack Sargent"
category: Web # should match the 'track' in challenges
description: |
    An Insecure Direct Object Reference (IDOR) can expose data to attackers who know what they're looking for.

    So far, we've seen the pages:

    ```
    /static/page1.html
    /static/page2.html
    ```

    Can you perform an IDOR attack to find the flag for this challenge?

    And, yes, I want to emphasize this is a real issue that has caused terabytes of data to be leaked, and worse.

    Further reading:
      - [OWASP Reference](https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/05-Authorization_Testing/04-Testing_for_Insecure_Direct_Object_References)
      - [OWASP IDOR PDF](https://owasp.org/www-chapter-ghana/assets/slides/IDOR.pdf)
      - [Hacker Recipies](https://www.thehacker.recipes/web/inputs/idor)

value: 10
type: standard

# Optional settings

# Flags specify answers that your challenge use. You should generally provide at least one.
# Can be removed if unused
# Accepts strings or dictionaries of CTFd API data
flags:
    # A static case sensitive flag
    - cybersword{i_dor_know_whats_going_on}

hints:
    - content: |
        Remember that all flags are in the format `cybersword{...}`
      cost: 0


# Requirements are used to make a challenge require another challenge to be
# solved before being available.
# Can be removed if unused
# Accepts challenge names as strings or challenge IDs as integers
requirements:
    - "Welcome"
    - "Hidden HTML"
    - "Hidden JS"

# The state of the challenge.
# If the field is omitted, the challenge is visible by default.
# If provided, the field can take one of two values: hidden, visible.
state: visible

# Specifies what version of the challenge specification was used.
# Subject to change until ctfcli v1.0.0
version: "0.1"

