# This file represents the base specification of your challenge. It is used by
# other tools to install and deploy your challenge.

# Required sections
name: "Variables"
author: "Zack Sargent"
category: Python
description: |
    Can you use variables to control what the computer remembers?

    <style>
    table, th, td {
        border: 1px solid black;
        border-collapse: collapse;
        padding: 3px;
    }
    </style>

    | Computer Part | Function         | Language Feature                          |
    |---------------|------------------|-------------------------------------------|
    | RAM           | Remembers things | Variables (‚≠ê You are here)               |
    | CPU           | Makes decisions  | If Statements, For Loops, Functions, etc. |
    <br>
    <a href="/ide/#challenge=10" target="_blank">
        <h2>
            Click Here!
        </h2>
    </a>
# prompt is inserted into the editor
prompt: |
    # We can control what our computer knows with variables.

    # We use the equals sign ("=") to create a variable.

    # Python can represent many types of data.
    # Here are three, for example.

    # Variables can hold numbers:
    a = 1       # integers
    b = 1.23    # floating point (a.k.a. decimal numbers)

    # Variables can hold text:
    greeting = 'hello ' # string (a.k.a. text)
    location = 'world'  # string (a.k.a. text)

    # Make a variable called 'c' that equals a + b

    # Make a variable called 'd' that equals greeting + location

# user code is inserted into template to replace USER_CODE
template: |
    USER_CODE
    print("===== MAGIC DEBUGGER OUTPUT =====")
    for variable_name in ('a', 'b', 'c', 'd'):
        try:
            i = eval(variable_name)
            print(f"{variable_name} equals {repr(i)} and has type {type(i).__name__}")
        except NameError:
            print(f"variable '{variable_name}' is not defined.")
    print("===== MAGIC DEBUGGER OUTPUT =====")
value: 10
type: standard

# Flags specify answers that your challenge use. You should generally provide at least one.
# Can be removed if unused
# Accepts strings or dictionaries of CTFd API data
flags:
    # A static case sensitive flag
    - cybersword{this_flag_may_vary}

# Topics are used to help tell what techniques/information a challenge involves
# They are generally only visible to admins
# Accepts strings
topics:
    - python

# Hints are used to give players a way to buy or have suggestions. They are not
# required but can be nice.
# Can be removed if unused
# Accepts dictionaries or strings
hints:
    - "Press tab to indent code."
    - "You can also use Ctrl + `]` to indent and Ctrl + `[` to un-indent."

# Requirements are used to make a challenge require another challenge to be
# solved before being available.
# Can be removed if unused
# Accepts challenge names as strings or challenge IDs as integers
requirements:
    - "Welcome"
    - "Hello, World!"

# The state of the challenge.
# If the field is omitted, the challenge is visible by default.
# If provided, the field can take one of two values: hidden, visible.
state: visible

# Specifies what version of the challenge specification was used.
# Subject to change until ctfcli v1.0.0
version: "0.1"
